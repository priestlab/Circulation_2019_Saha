{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 AndaleMono;}
{\colortbl;\red255\green255\blue255;\red49\green49\blue49;\red251\green251\blue251;\red49\green49\blue49;
\red251\green251\blue251;}
{\*\expandedcolortbl;;\cssrgb\c25098\c25098\c25098;\cssrgb\c98824\c98824\c98824;\cssrgb\c25098\c25098\c25098;
\cssrgb\c98824\c98824\c98824;}
\margl1440\margr1440\vieww18160\viewh13600\viewkind0
\deftab720
\pard\pardeftab720\sl280\partightenfactor0

\f0\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 BioBank Program Documentation
\fs24 \
\
This module demonstrates documentation as specified by the `Google Python\
Style Guide`_. Docstrings may extend over multiple lines. Sections are created\
with a section header and a colon followed by a block of indented text.\
\
The program can be modified by directly writing code into the the following functions:\cf4 \cb5 \outl0\strokewidth0 \
\pard\pardeftab720\sl280\partightenfactor0
\cf4 \
\pard\pardeftab720\sl280\partightenfactor0
\cf2 \cb3 \outl0\strokewidth0 \strokec2 def process_file(headers, output_column_names):\
    """This function is used to find and specify which fields in Biobank you are interested in and what columns you want in 		your output file. You may modify this function."""\
	\
\pard\pardeftab720\sl280\partightenfactor0
\cf4 \cb5 \outl0\strokewidth0 	Args:\
		headers (These are the all of the available fields in biobank)\
		output_column_names (A dictionary that is initialized with Patient_ID)\
\
	Returns:\
		field_index (dict required),\
		output_column_names (list required - expects \'91Patient_ID\'92)\cf2 \cb3 \outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\sl280\partightenfactor0
\cf2 \
    return field_index, output_column_names\
\
\
def next_row(line, output_row, output_column_names, field_index):\
    """This function lets you handle each row in the biobank file one at a time. Expects a dictionary of values that will 		become one line of output in your output file. All biobank values will be of type 'string', make sure to convert to float 	or int when comparing numerical values but not codes that may start with 0 (e.g. - ICD9). You may modify this 			function."""\
\
    \cf4 \cb5 \outl0\strokewidth0 Args:\
\pard\pardeftab720\sl280\partightenfactor0
\cf4 		line (List of Values in one Biobank Row)\
		output_row \cf4 \cb5 (A dictionary that is already initialized with the Patient_ID of this row)\cf4 \cb5 \
		output_column_names (The column names you created from the above file)\
		field_index (The indices you created from the above file)\
\
    Returns:\
		field_index (dict required),\
		output_column_names (list required - expects \'91Patient_ID\'92)\cf2 \cb3 \outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\sl280\partightenfactor0
\cf2 \
    return output_row\
\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\cf4 \cb5 \outl0\strokewidth0 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\

\fs36 main_func\
\

\fs24 \cf2 \cb3 \outl0\strokewidth0 \strokec2 def get_header_indices(headers, bb_field, bb_field_age=None):\
    """ Returns a list of indices or a list of tuples with indices that correspond to specific fields in the file"""\
	\
	\cf4 \cb5 \outl0\strokewidth0 Args:\
\pard\pardeftab720\sl280\partightenfactor0
\cf4 		headers (These are the all of the available fields in biobank)\
		\cf4 \cb5 bb_field\cf4 \cb5  (The code associated with this BioBank Field)\
\pard\pardeftab720\sl280\partightenfactor0
\cf4 \cb5 		bb_field_age (The code associated with the age of the above field) - Not Required\cf4 \cb5 \
\
	Returns:\
		field_indices (Returns list of code positions or list of tuples with positions for (bb_field, bb_field_age))\
\
	Examples:\
\
		ICD10 codes have field codes of 41202 and 41204:\
\
			get_header_indices(headers, \'9341202\'94) + get_header_indices(headers, '41204')\
\
		\
		If you only want values from the first hospital visit for some random field: 6560.\
		\
			get_header_indices(headers, \'936560_0\'94)\
\
		If you want self-reported medical codes and associated ages, OR any code with another associated code.\
\
			get_header_indices(headers, '20002', '20009')\
\
		\
		\cf4 \cb5 \
\
\
def get_patient_vals(line, index_list, return_both = False):\
    """Returns patient values that correspond to the given indices"""\
\
    \cf4 \cb5 Args:\
		line (These are the all values in the row)\
		index_list (Excepts values from get_header_indices)\
		return_both (Returns both the code and age value if the index_list is also a tuple) - Not Required\
\
	Returns:\
		List of Values corresponding to the index_list\
\
\
\
\
\
\
def has_condition(tuple_list, main_values, conditional_values, return_existing_cond = False):\
    """ If two values from a tuple exist in the main values and conditional values respectively,\
        return main_values where tuple exists, unless return_existing_cond = True, then return both main_values and conditional_values where tuple exists.\
\
        e.g. - main_values = ['HEART SURGERY', 'ASD PFO']\
               We do not want the following values to exist in a patient: ("HEART SURGERY", "AORTITIS")\
               If HEART SURGERY exists in the patient's main values and AORTITIS exists in the patient's conditional values, HEART SURGERY is removed from main values.\
               main_values = ['HEART SURGERY']    <- Function Output (return_existing_cond = False)\
               conditional_values = ['AORTITIS']    <- Function Output (return_existing_cond = True)\
\
        tuple_list (required): Accepts a list or set of tuples\
        main_values (required): Accepts a list of values that may or may not match the first instance of the tuple\
        conditional_values (required): Accepts a list of values that may or may not match the second instance of the tuple\
        return_existing_cond (optional): If true, returns both main and conditional values where paired tuple values exist. Otherwise, returns just main_values."""\
\
    \cf2 \cb3 \outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\sl280\partightenfactor0
\cf2 \
}